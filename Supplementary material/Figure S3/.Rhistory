tm_shape(redsea) +
qtm(asia)
qtm(asia) + tm_shape(redsea)
qtm(asia) + plot(redsea)
redsea = world[world$name_long == "Israel", ]
qtm(asia) + plot(redsea)
tm_shape(redsea)
plot(redsea)
plot(st_geometry(redsea), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
plot(st_geometry(redsea), expandBB = c(1, 1, 1, 1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
world_asia = world[world$continent == "Africa", ]
world_africa = world[world$continent == "Africa", ]
world_asia = world[world$continent == "Asia", ]
plot(world_africa[0], add = TRUE)
redsea_plot<-plot(world_africa[0], add = TRUE)
redsea_plot + tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) + #Add the lat/lon axes
middle_east = cbind(world_asia,world_africa)
redsea = world[world$name_long == "Israel", ]
View(world_africa)
middle_east = merge(world_asia,world_africa)
View(world_africa)
View(world_asia)
middle_east = merge(world_asia,world_africa, by = geom)
RedSea<-plot(st_geometry(Israel), expandBB = c(1.5, 1.5, 1.5, 1.5), col = "gray", lwd = 3)
Israel = world[world$name_long == "Israel", ]
RedSea<-plot(st_geometry(Israel), expandBB = c(1.5, 1.5, 1.5, 1.5), col = "gray", lwd = 3)
(redsea <- tm_shape(shp = RedSea) + #Load the coastline shape element
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
)
View(redsea)
RedSea<-plot(st_geometry(Israel), expandBB = c(1.5, 1.5, 1.5, 1.5), col = "gray", lwd = 3) +
plot(world_asia[0], add = TRUE) + plot(world_africa[0], add = TRUE)
RedSea
(RedSea + tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
)
RedSea + tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tmap_mode("view") # Change the view mode to 'plot' rather than 'view'
RedSea + tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
(ning.tm <- tm_shape(world_asia) + #Load the coastline shape element
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
)
(ning.tm <- tm_shape(world_asia) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
)
(ning.tm <- tm_shape(Israel) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
)
RedSea <- tm_shape(Israel) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
library(tmap)
library(tmap)
tmap_mode("plot") # Change the view mode to 'plot' rather than 'view'
world_asia = world[world$continent == "Asia", ]
world_africa = world[world$continent == "Africa", ]
Israel = world[world$name_long == "Israel", ]
RedSea<-plot(st_geometry(Israel), expandBB = c(1.5, 1.5, 1.5, 1.5), col = "gray", lwd = 3) +
plot(world_asia[0], add = TRUE) + plot(world_africa[0], add = TRUE)
RedSea <- tm_shape(Israel) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(Israel) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
RedSea <- tm_shape(Israel) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
RedSea <- tm_shape(Israel) + #Load the coastline shape element
tm_polygons(world_asia) + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
View(Israel)
RedSea <- tm_shape(world_africa) + #Load the coastline shape element
tm_polygons(world_asia) + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(world_africa) + #Load the coastline shape element
tm_polygons(world_asia) + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(Israel) + #Load the coastline shape element
tm_polygons(world_asia) + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(Israel) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(world_asia) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
View(world_asia)
View(world_africa)
world_middle_east <- rbind(world_asia, world_africa)
plot(st_geometry(Israel), expandBB = c(1.5, 1.5, 1.5, 1.5), col = "gray", lwd = 3) +
plot(world_middle_east[0], add = TRUE)
RedSea<-plot(st_geometry(Israel), expandBB = c(3, 3, 3, 3), col = "gray", lwd = 3) +
plot(world_middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(2, 3, 4, 3), col = "gray", lwd = 3) +
plot(world_middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(4, 3, 2, 3), col = "gray", lwd = 3) +
plot(world_middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "gray", lwd = 3) +
plot(world_middle_east[0], add = TRUE)
tm_shape(world_middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
View(world_middle_east)
asia = world[world$subregion == "Western Asia", ]
africa = world[world$subregion == "Eastern Africa", ]
middle_east <- rbind(world_asia, world_africa)
Israel = world[world$name_long == "Israel", ]
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "gray", lwd = 3) +
plot(middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "gray", lwd = 1) +
plot(middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "green", lwd = 1) +
plot(middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "darkgreen", lwd = 1) +
plot(middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "green3", lwd = 1) +
plot(middle_east[0], add = TRUE)
RedSea <- tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
asia = world[world$subregion == "Western Asia", ]
africa = world[world$subregion == "Eastern Africa", ]
middle_east <- rbind(asia, africa)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
north.africa = world[world$subregion == "Northern Africa", ]
asia = world[world$subregion == "Western Asia", ]
east.africa = world[world$subregion == "Eastern Africa", ]
north.africa = world[world$subregion == "Northern Africa", ]
middle_east <- rbind(asia, east.africa,north.africa)
Israel = world[world$name_long == "Israel", ]
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
middle_east <- rbind(asia,north.africa)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
africa = world[world$continent == "Africa", ]
middle_east <- rbind(asia, africa)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
View(middle_east)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons(tm_fill = Israel) + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons(tm_fill = "Israel") +
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
?ne_countries
library("ggplot2")
library("sf")
library("rnaturalearth")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
world_points<- st_centroid(world)
library(tmap)
tmap_mode("plot") # Change the view mode to 'plot' rather than 'view'
asia = world[world$subregion == "Western Asia", ]
africa = world[world$continent == "Africa", ]
north.africa = world[world$subregion == "Northern Africa", ]
middle_east <- rbind(asia, africa)
Israel = world[world$name_long == "Israel", ]
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "green3", lwd = 1) +
plot(middle_east[0], add = TRUE)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons(tm_fill = "Israel") +
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
#tm_scale_bar(breaks = c(0, 1000, 2000), text.size = 5, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
world_points<- st_centroid(world)
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
redsea_countries<-world_points[world_points$name %in% c("Israel", "Egypt", "Saudi Arabia", "Jordan","Sudan","Eritrea", "Yemen", "Djibouti"), ]
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
library("rnaturalearthdata")
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
library("ggspatial")
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
library(tmap)
tmap_mode("plot") # Change the view mode to 'plot' rather than 'view'
asia = world[world$subregion == "Western Asia", ]
africa = world[world$continent == "Africa", ]
north.africa = world[world$subregion == "Northern Africa", ]
middle_east <- rbind(asia, africa)
Israel = world[world$name_long == "Israel", ]
library("sf")
world <- ne_countries(scale = "medium", returnclass = "sf")
asia = world[world$subregion == "Western Asia", ]
africa = world[world$continent == "Africa", ]
north.africa = world[world$subregion == "Northern Africa", ]
middle_east <- rbind(asia, africa)
Israel = world[world$name_long == "Israel", ]
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "green3", lwd = 1) +
plot(middle_east[0], add = TRUE)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons(tm_fill = "Israel") +
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
#tm_scale_bar(breaks = c(0, 1000, 2000), text.size = 5, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
library("ggspatial")
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
world_points<- st_centroid(world)
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
redsea_countries<-world_points[world_points$name %in% c("Israel", "Egypt", "Saudi Arabia", "Jordan","Sudan","Eritrea", "Yemen", "Djibouti"), ]
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
Settlement_analysis_new <- read.csv("~/Documents/UQ Files/Palau II/Experiment 1/Settlement experiment/Settlement_analysis_new.csv")
View(Settlement_analysis_new)
Normal_settlement<-subset(Settlement_analysis_new, Tank_treatment=="Regular")
View(Normal_settlement)
library(MASS)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
Pois_model<-glm(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement, family=poisson)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
ZF_model<-glmmadmb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement, zeroInflation = TRUE)
library(glmmADMB)
1 - pchisq(summary(NB_model)$deviance,
summary(NB_model)$df.residual) # GOF is < 0.05 therefore not a good NB model fit. Try poisson.
1 - pchisq(summary(Pois_model)$deviance,
summary(Pois_model)$df.residual) #Even worse... Ultimately NB looks much better.
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
library(car)
Anova(NB_model)
Settlement_analysis_cm2 <- read.csv("~/Documents/UQ Files/Palau II/Experiment 1/Settlement experiment/Settlement_analysis_cm2.csv")
View(Settlement_analysis_cm2)
Normal_settlement<-subset(Settlement_analysis_cm2, Tank_treatment=="Regular")
View(Normal_settlement)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
1 - pchisq(summary(NB_model)$deviance,
summary(NB_model)$df.residual) # GOF is < 0.05 therefore not a good NB model fit. Try poisson.
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
Pois_model<-glm(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement, family=poisson)
1 - pchisq(summary(Pois_model)$deviance,
summary(Pois_model)$df.residual) #Even worse... Ultimately NB looks much better.
View(Settlement_analysis_cm2)
Settlement_analysis_cm2 <- read.csv("~/Documents/UQ Files/Palau II/Experiment 1/Settlement experiment/Settlement_analysis_cm2.csv")
View(Settlement_analysis_cm2)
Normal_settlement<-subset(Settlement_analysis_cm2, Tank_treatment=="Regular")
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
1 - pchisq(summary(NB_model)$deviance,
summary(NB_model)$df.residual) # GOF is < 0.05 therefore not a good NB model fit. Try poisson.
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
Settlement_analysis_cm2 <- read.csv("~/Documents/UQ Files/Palau II/Experiment 1/Settlement experiment/Settlement_analysis_cm2.csv")
View(Settlement_analysis_cm2)
Normal_settlement<-subset(Settlement_analysis_cm2, Tank_treatment=="Regular")
View(Normal_settlement)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
warnings()
install.packages("gamlss")
# new model running by cm2
library(lme4)
NB_model<-glmer.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
?family
library(gamlss)
NB_model<-gamlss(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, family= NBI, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
NB_model<-gamlss(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, family= LO, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
NB_model<-gamlss(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, family= GA, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
NB_model<-gamlss(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, family= GA, data=Normal_settlement)
NB_model<-aov(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
NB_model<-aov(Settlers ~ Plot_treatment*Tile_treatment+ Tile_treatment*Microhabitat + Plot_treatment*Microhabitat, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
NB_model<-aov(Settlers ~ Plot_treatment*Tile_treatment+ Tile_treatment*Microhabitat, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
NB_model<-aov(Settlers ~ Tile_treatment*Microhabitat, data=Normal_settlement)
#compare model fits
library(DHARMa)
diagnose <- simulateResiduals(fittedModel=NB_model, n=250)
diagnose$scaledResiduals # residuals stored in here
# Plot scaled Residuals
plot(diagnose) # ok
drop1(New_mod)
New_mod<-aov(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
drop1(New_mod)
summary(New_mod) #### Settlement model used for paper.
plot(New_mod)
drop1(New_mod)
drop1(New_mod, test="F")
drop1(New_mod, test="Chisq")
New_mod<-glm(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
plot(New_mod)
summary(New_mod) #### Settlement model used for paper.
drop1(New_mod, test="Chisq")
Anova(New_mod)
drop1(New_mod, test="Chisq")
New_mod2<-glm(Settlers ~ Plot_treatment*Tile_treatment + Microhabitat*Tile_treatment + Tile_treatment*Microhabitat, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod)
Anova(New_mod2)
drop1(New_mod2, test="Chisq")
New_mod2<-glm(Settlers ~ Microhabitat*Tile_treatment + Tile_treatment*Microhabitat, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod2)
New_mod2<-glm(Settlers ~ Plot_treatment*Tile_treatment + Plot_treatment*Microhabitat + Tile_treatment*Microhabitat, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod2)
Anova(New_mod2)
drop1(New_mod2, test="Chisq")
New_mod2<-glm(Settlers ~ Tile_treatment*Microhabitat, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod2)
drop1(New_mod2, test="Chisq")
New_mod2<-glm(Settlers ~ Tile_treatment*Microhabitat + Plot_treatment, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod2)
emmeans(New_mod2, pairwise ~ Microhabitat| Tile_treatment)
library(emmeans)
emmeans(New_mod2, pairwise ~ Microhabitat| Tile_treatment)
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
summary_data <- ddply(Normal_settlement, c("Tile_treatment"), summarise, N= length(proportion), mean = mean(proportion),
sd   = sd(proportion),
se   = sd / sqrt(N))
summary_data
library(dplyr)
summary_data <- ddply(Normal_settlement, c("Tile_treatment"), summarise, N= length(proportion), mean = mean(proportion),
sd   = sd(proportion),
se   = sd / sqrt(N))
library(plyr)
summary_data <- ddply(Normal_settlement, c("Tile_treatment"), summarise, N= length(proportion), mean = mean(proportion),
sd   = sd(proportion),
se   = sd / sqrt(N))
summary_data
View(Normal_settlement)
summary_data <- ddply(Normal_settlement, c("Tile_treatment"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
summary_data <- ddply(Normal_settlement, c("Tile_treatment","Microhabitat"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
summary_data <- ddply(Normal_settlement, c("Microhabitat"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
emmeans(New_mod2, pairwise ~ Microhabitat | Tile_treatment)
summary_data <- ddply(Normal_settlement, c("Tile_treatment","Microhabitat"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
emmeans(New_mod2, pairwise ~ Microhabitat | Tile_treatment)
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
summary_data <- ddply(Normal_settlement, c("Tile_treatment","Microhabitat"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
emmeans(New_mod2, pairwise ~ Microhabitat | Tile_treatment)
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
emmeans(New_mod2, pairwise ~ Tile_treatment * Microhabitat)
setwd("~/Documents/ODU_Post-doc/Writing/CBASS vs. RSS - physiology manuscript /Github_CBASS-vs-RSS-Physiology/Supplementary material/Figure S3")
library(lmerTest)
library(emmeans)
library(sjPlot)
library(car)
#Load file
Eilat_2019<-read.csv("Eilat_Full_responses_data_clean.csv")
View(Eilat_2019)
Eilat_2019$Geno<- as.factor(Eilat_2019$Geno)
Eilat_2019$Tank<- as.factor(Eilat_2019$Tank)
str(Eilat_2019)
Control_check<-subset(Eilat_2019, Temp=="Field" | Temp=="Start" | Temp=="27")
Control_check<-subset(Control_check,Timepoint=="Hold")
Control_check<-subset(Control_check,Experiment=="CBASS")
Eilat_no_field<-subset(Eilat_2019, Temp=="27" | Temp=="29.5" | Temp=="32" | Temp=="34.5")
Hold_all<-subset(Eilat_no_field, Timepoint=="Hold")
Recovery_all<-subset(Eilat_no_field, Timepoint=="Recovery")
#T1 - Hold statistical models
#Tank removed due to a lack of replication for respiration and photosynthesis across tanks
#Respiration
Resp_hold<-lmer(Resp ~ Temp*Experiment +(1|Geno),data=Hold_all) #Full model
step(Resp_hold,reduce.random=FALSE) #Model selection
Resp_hold_final<-lmer(Resp ~ Temp*Experiment +(1|Geno),data=Hold_all)  #Final model based on step output
anova(Resp_hold_final)
rand(Resp_hold_final)
Resp_recovery<-lmer(Resp ~ Experiment*Temp + (1|Geno), data=Recovery_all)
step(Resp_recovery)
#Net photosynthesis
NetPS_hold<-lmer(NetPS ~ Experiment*Temp + (1|Geno), data=Hold_all)
step(NetPS_hold, reduce.random=FALSE)
