plot(middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "green", lwd = 1) +
plot(middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "darkgreen", lwd = 1) +
plot(middle_east[0], add = TRUE)
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "green3", lwd = 1) +
plot(middle_east[0], add = TRUE)
RedSea <- tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
asia = world[world$subregion == "Western Asia", ]
africa = world[world$subregion == "Eastern Africa", ]
middle_east <- rbind(asia, africa)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
north.africa = world[world$subregion == "Northern Africa", ]
asia = world[world$subregion == "Western Asia", ]
east.africa = world[world$subregion == "Eastern Africa", ]
north.africa = world[world$subregion == "Northern Africa", ]
middle_east <- rbind(asia, east.africa,north.africa)
Israel = world[world$name_long == "Israel", ]
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
middle_east <- rbind(asia,north.africa)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
africa = world[world$continent == "Africa", ]
middle_east <- rbind(asia, africa)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons() + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
View(middle_east)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons(tm_fill = Israel) + # Hide the legend for the coast fill
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons(tm_fill = "Israel") +
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
tm_scale_bar(breaks = c(0, 25, 50), text.size = 1, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
?ne_countries
library("ggplot2")
library("sf")
library("rnaturalearth")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
world_points<- st_centroid(world)
library(tmap)
tmap_mode("plot") # Change the view mode to 'plot' rather than 'view'
asia = world[world$subregion == "Western Asia", ]
africa = world[world$continent == "Africa", ]
north.africa = world[world$subregion == "Northern Africa", ]
middle_east <- rbind(asia, africa)
Israel = world[world$name_long == "Israel", ]
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "green3", lwd = 1) +
plot(middle_east[0], add = TRUE)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons(tm_fill = "Israel") +
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
#tm_scale_bar(breaks = c(0, 1000, 2000), text.size = 5, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
world_points<- st_centroid(world)
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
redsea_countries<-world_points[world_points$name %in% c("Israel", "Egypt", "Saudi Arabia", "Jordan","Sudan","Eritrea", "Yemen", "Djibouti"), ]
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
library("rnaturalearthdata")
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
library("ggspatial")
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
library(tmap)
tmap_mode("plot") # Change the view mode to 'plot' rather than 'view'
asia = world[world$subregion == "Western Asia", ]
africa = world[world$continent == "Africa", ]
north.africa = world[world$subregion == "Northern Africa", ]
middle_east <- rbind(asia, africa)
Israel = world[world$name_long == "Israel", ]
library("sf")
world <- ne_countries(scale = "medium", returnclass = "sf")
asia = world[world$subregion == "Western Asia", ]
africa = world[world$continent == "Africa", ]
north.africa = world[world$subregion == "Northern Africa", ]
middle_east <- rbind(asia, africa)
Israel = world[world$name_long == "Israel", ]
plot(st_geometry(Israel), expandBB = c(5, 3, 2, 3), col = "green3", lwd = 1) +
plot(middle_east[0], add = TRUE)
tm_shape(middle_east) + #Load the coastline shape element
tm_polygons(tm_fill = "Israel") +
tm_compass(type = "8star", position = c("left", "top"), size = 2) + # Add a compass rose
#tm_scale_bar(breaks = c(0, 1000, 2000), text.size = 5, position = c(0.4, 0.02)) + # Add a scale bar
tm_graticules(projection = "longlat", lines = FALSE) #Add the lat/lon axes
library("ggspatial")
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
world_points<- st_centroid(world)
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
redsea_countries<-world_points[world_points$name %in% c("Israel", "Egypt", "Saudi Arabia", "Jordan","Sudan","Eritrea", "Yemen", "Djibouti"), ]
ggplot(data = world) +
geom_sf(color = "black", fill = "antiquewhite2") +
xlab("Longitude") + ylab("Latitude") +
coord_sf(xlim = c(20, 60), ylim = c(0, 35), expand = FALSE) +
geom_text(data= redsea_countries,aes(x=X, y=Y, label=name), color = "black", fontface = "bold", check_overlap = FALSE,size = 4) +
annotate(geom = "text", x = 37.8, y = 22, label = "Red Sea", angle = -60, fontface = 4, color = "grey22", size = 4) +
annotate(geom = "text", x = 54, y = 5, label = "Indian Ocean", fontface = 4, color = "grey22", size = 3.7) +
theme(panel.grid.major = element_blank(), panel.background = element_rect(fill = "steelblue1")) +
geom_point(x = 34.9, y = 29.45, shape=21,fill = "red", size = 3) + theme(axis.text = element_text(colour = "black")) +
theme(axis.ticks.length=unit(.2,"cm")) + theme(panel.background = element_rect(colour = "black", size=1)) +
annotation_north_arrow(which_north = "true",style = north_arrow_nautical, location = "br") +
annotation_scale(location = "br", width_hint = 0.5, )
Settlement_analysis_new <- read.csv("~/Documents/UQ Files/Palau II/Experiment 1/Settlement experiment/Settlement_analysis_new.csv")
View(Settlement_analysis_new)
Normal_settlement<-subset(Settlement_analysis_new, Tank_treatment=="Regular")
View(Normal_settlement)
library(MASS)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
Pois_model<-glm(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement, family=poisson)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
ZF_model<-glmmadmb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement, zeroInflation = TRUE)
library(glmmADMB)
1 - pchisq(summary(NB_model)$deviance,
summary(NB_model)$df.residual) # GOF is < 0.05 therefore not a good NB model fit. Try poisson.
1 - pchisq(summary(Pois_model)$deviance,
summary(Pois_model)$df.residual) #Even worse... Ultimately NB looks much better.
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
library(car)
Anova(NB_model)
Settlement_analysis_cm2 <- read.csv("~/Documents/UQ Files/Palau II/Experiment 1/Settlement experiment/Settlement_analysis_cm2.csv")
View(Settlement_analysis_cm2)
Normal_settlement<-subset(Settlement_analysis_cm2, Tank_treatment=="Regular")
View(Normal_settlement)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
1 - pchisq(summary(NB_model)$deviance,
summary(NB_model)$df.residual) # GOF is < 0.05 therefore not a good NB model fit. Try poisson.
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
Pois_model<-glm(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement, family=poisson)
1 - pchisq(summary(Pois_model)$deviance,
summary(Pois_model)$df.residual) #Even worse... Ultimately NB looks much better.
View(Settlement_analysis_cm2)
Settlement_analysis_cm2 <- read.csv("~/Documents/UQ Files/Palau II/Experiment 1/Settlement experiment/Settlement_analysis_cm2.csv")
View(Settlement_analysis_cm2)
Normal_settlement<-subset(Settlement_analysis_cm2, Tank_treatment=="Regular")
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
1 - pchisq(summary(NB_model)$deviance,
summary(NB_model)$df.residual) # GOF is < 0.05 therefore not a good NB model fit. Try poisson.
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
Settlement_analysis_cm2 <- read.csv("~/Documents/UQ Files/Palau II/Experiment 1/Settlement experiment/Settlement_analysis_cm2.csv")
View(Settlement_analysis_cm2)
Normal_settlement<-subset(Settlement_analysis_cm2, Tank_treatment=="Regular")
View(Normal_settlement)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
warnings()
install.packages("gamlss")
# new model running by cm2
library(lme4)
NB_model<-glmer.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
NB_model<-glm.nb(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
?family
library(gamlss)
NB_model<-gamlss(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, family= NBI, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
NB_model<-gamlss(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, family= LO, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
Anova(NB_model)
NB_model<-gamlss(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, family= GA, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
NB_model<-gamlss(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, family= GA, data=Normal_settlement)
NB_model<-aov(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
NB_model<-aov(Settlers ~ Plot_treatment*Tile_treatment+ Tile_treatment*Microhabitat + Plot_treatment*Microhabitat, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
NB_model<-aov(Settlers ~ Plot_treatment*Tile_treatment+ Tile_treatment*Microhabitat, data=Normal_settlement)
summary(NB_model) #### Settlement model used for paper.
NB_model<-aov(Settlers ~ Tile_treatment*Microhabitat, data=Normal_settlement)
#compare model fits
library(DHARMa)
diagnose <- simulateResiduals(fittedModel=NB_model, n=250)
diagnose$scaledResiduals # residuals stored in here
# Plot scaled Residuals
plot(diagnose) # ok
drop1(New_mod)
New_mod<-aov(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
drop1(New_mod)
summary(New_mod) #### Settlement model used for paper.
plot(New_mod)
drop1(New_mod)
drop1(New_mod, test="F")
drop1(New_mod, test="Chisq")
New_mod<-glm(Settlers ~ Plot_treatment*Tile_treatment*Microhabitat, data=Normal_settlement)
plot(New_mod)
summary(New_mod) #### Settlement model used for paper.
drop1(New_mod, test="Chisq")
Anova(New_mod)
drop1(New_mod, test="Chisq")
New_mod2<-glm(Settlers ~ Plot_treatment*Tile_treatment + Microhabitat*Tile_treatment + Tile_treatment*Microhabitat, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod)
Anova(New_mod2)
drop1(New_mod2, test="Chisq")
New_mod2<-glm(Settlers ~ Microhabitat*Tile_treatment + Tile_treatment*Microhabitat, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod2)
New_mod2<-glm(Settlers ~ Plot_treatment*Tile_treatment + Plot_treatment*Microhabitat + Tile_treatment*Microhabitat, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod2)
Anova(New_mod2)
drop1(New_mod2, test="Chisq")
New_mod2<-glm(Settlers ~ Tile_treatment*Microhabitat, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod2)
drop1(New_mod2, test="Chisq")
New_mod2<-glm(Settlers ~ Tile_treatment*Microhabitat + Plot_treatment, data=Normal_settlement)
summary(New_mod2) #### Settlement model used for paper.
Anova(New_mod2)
emmeans(New_mod2, pairwise ~ Microhabitat| Tile_treatment)
library(emmeans)
emmeans(New_mod2, pairwise ~ Microhabitat| Tile_treatment)
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
summary_data <- ddply(Normal_settlement, c("Tile_treatment"), summarise, N= length(proportion), mean = mean(proportion),
sd   = sd(proportion),
se   = sd / sqrt(N))
summary_data
library(dplyr)
summary_data <- ddply(Normal_settlement, c("Tile_treatment"), summarise, N= length(proportion), mean = mean(proportion),
sd   = sd(proportion),
se   = sd / sqrt(N))
library(plyr)
summary_data <- ddply(Normal_settlement, c("Tile_treatment"), summarise, N= length(proportion), mean = mean(proportion),
sd   = sd(proportion),
se   = sd / sqrt(N))
summary_data
View(Normal_settlement)
summary_data <- ddply(Normal_settlement, c("Tile_treatment"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
summary_data <- ddply(Normal_settlement, c("Tile_treatment","Microhabitat"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
summary_data <- ddply(Normal_settlement, c("Microhabitat"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
emmeans(New_mod2, pairwise ~ Microhabitat | Tile_treatment)
summary_data <- ddply(Normal_settlement, c("Tile_treatment","Microhabitat"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
emmeans(New_mod2, pairwise ~ Microhabitat | Tile_treatment)
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
summary_data <- ddply(Normal_settlement, c("Tile_treatment","Microhabitat"), summarise, N= length(Settlers), mean = mean(Settlers),
sd   = sd(Settlers),
se   = sd / sqrt(N))
summary_data
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
emmeans(New_mod2, pairwise ~ Microhabitat | Tile_treatment)
emmeans(New_mod2, pairwise ~ Tile_treatment | Microhabitat)
emmeans(New_mod2, pairwise ~ Tile_treatment * Microhabitat)
library(lmerTest)
library(emmeans)
library(sjPlot)
#need to set wd to source file location
#Load file
Eilat_2019<-read.csv("Eilat_Full_responses_data_clean.csv")
View(Eilat_2019)
Eilat_2019$Geno<- as.factor(Eilat_2019$Geno)
str(Eilat_2019)
setwd("~/Documents/ODU_Post-doc/Writing/CBASS vs. RSS - physiology manuscript /Github_CBASS-vs-RSS-Physiology/Figures/Figure 4")
Eilat_2019<-read.csv("Eilat_Full_responses_data_clean.csv")
View(Eilat_2019)
Eilat_2019$Geno<- as.factor(Eilat_2019$Geno)
str(Eilat_2019)
#Subset data
Control_check1<-subset(Eilat_2019, Temp=="Field" | Temp=="Start" | Temp=="27")
Control_check<-subset(Control_check1,Timepoint=="Hold")
Eilat_no_field<-subset(Eilat_2019, Temp=="27" | Temp=="29.5" | Temp=="32" | Temp=="34.5")
Eilat_no_field$Tank<- as.factor(Eilat_no_field$Tank)
Hold_all<-subset(Eilat_no_field, Timepoint=="Hold")
PAM_hold<-lmer(PAM ~ Experiment*Temp + (1|Tank) + (1|Geno), data=Hold_all)
sjPlot::plot_model(PAM_hold, type="diag")
step(PAM_hold, reduce.random=FALSE)
PAM_hold_final<-lmer(PAM ~ Temp + (1|Tank) + (1|Geno),data=Hold_all)
anova(PAM_hold_final)
print(emmeans(PAM_hold_final, list(pairwise ~ Temp)), adjust = c("tukey"))
Hold_all$Temp<-as.character(Hold_all$Temp)
Hold_all$Temp<-as.numeric(Hold_all$Temp)
str(Hold_all)
#### Compare curves and ED50s ####
Eilat_DRC <- drm(PAM ~ Temp, data = Hold_all, curveid = Experiment, fct = LL.3(names = c('hill', 'max', 'ed50')))
mselect(Eilat_DRC, list(LL.2(), LL.4(), LL.5(), LL2.2(), LL2.3(), LL2.4(), LL2.5(), AR.2(), AR.3(), EXD.2(), EXD.3()), icfct = AIC)
modelFit(Eilat_DRC)
summary(Eilat_DRC)
compParm(Eilat_DRC, 'ed50', "-")
plot(Eilat_DRC)
library(drc)
library(ggplot2)
library(Rmisc)
Eilat_DRC <- drm(PAM ~ Temp, data = Hold_all, curveid = Experiment, fct = LL.3(names = c('hill', 'max', 'ed50')))
plot(Eilat_DRC)
compParm(Eilat_DRC, 'ed50', "-")
#extract ED50
Eilat_CBASS_coeff<-data.frame(ED(Eilat_CBASS, c(50)))
Eilat_CBASS <- drm(PAM ~ Temp, data = Hold_all[Hold_all$Experiment=="CBASS",], fct = LL.3())
#extract ED50
Eilat_CBASS_coeff<-data.frame(ED(Eilat_CBASS, c(50)))
Eilat_CBASS_coeff_mean<-Eilat_CBASS_coeff[,1]
Eilat_RSS <- drm(PAM ~ Temp, data = Hold_all[Hold_all$Experiment=="RSS",],fct = LL.3())
Eilat_coeffs<-data.frame(Eilat_CBASS_coeff, Eilat_RSS_coeff)
Eilat_CBASS_preddata = data.frame(temp = seq(27,39, length.out = 100))
Eilat_CBASS_pred = as.data.frame(predict(Eilat_CBASS, newdata = Eilat_CBASS_preddata, interval = 'confidence'))
Eilat_CBASS_preddata = data.frame(Eilat_CBASS_preddata, fvfm = Eilat_CBASS_pred$Prediction, Lower = Eilat_CBASS_pred$Lower, Upper = Eilat_CBASS_pred$Upper)
Eilat_RSS_preddata = data.frame(temp = seq(27,39, length.out = 100))
Eilat_RSS_pred = as.data.frame(predict(Eilat_RSS, newdata = Eilat_RSS_preddata, interval = 'confidence'))
Eilat_RSS_preddata = data.frame(Eilat_RSS_preddata, fvfm = Eilat_RSS_pred$Prediction, Lower = Eilat_RSS_pred$Lower, Upper = Eilat_RSS_pred$Upper)
#extract ED50
Eilat_RSS_coeff<-Eilat_RSS_coeff[,1]
#extract ED50
Eilat_CBASS_coeff<-data.frame(ED(Eilat_CBASS, c(50)))
#extract ED50
Eilat_CBASS_coeff<-data.frame(ED(Eilat_CBASS, c(50)))
Eilat_CBASS_coeff<-Eilat_CBASS_coeff[,1]
summary(Eilat_CBASS)
View(Eilat_CBASS)
#extract ED50
Eilat_CBASS_coeff<-Eilat_CBASS[["fit"]][["par"]][,3]
View(Eilat_CBASS)
#extract ED50
Eilat_CBASS_coeff<-data.frame(ED(Eilat_CBASS, c(50))[,1])
#extract ED50
Eilat_CBASS_coeff<-ED(Eilat_CBASS, c(50))[,1]
setwd("~/Documents/ODU_Post-doc/Writing/CBASS vs. RSS - physiology manuscript /Github_CBASS-vs-RSS-Physiology/Figures/Figure 4")
library(lmerTest)
library(emmeans)
library(sjPlot)
library(drc)
library(ggplot2)
library(Rmisc)
#need to set wd to source file location
#Load file
Eilat_2019<-read.csv("Eilat_Full_responses_data_clean.csv")
View(Eilat_2019)
Eilat_2019$Geno<- as.factor(Eilat_2019$Geno)
str(Eilat_2019)
#Subset data
Control_check1<-subset(Eilat_2019, Temp=="Field" | Temp=="Start" | Temp=="27")
Control_check<-subset(Control_check1,Timepoint=="Hold")
Eilat_no_field<-subset(Eilat_2019, Temp=="27" | Temp=="29.5" | Temp=="32" | Temp=="34.5")
Eilat_no_field$Tank<- as.factor(Eilat_no_field$Tank)
Hold_all<-subset(Eilat_no_field, Timepoint=="Hold")
Hold_all$Temp<-as.character(Hold_all$Temp)
Hold_all$Temp<-as.numeric(Hold_all$Temp)
Eilat_DRC <- drm(PAM ~ Temp, data = Hold_all, curveid = Experiment, fct = LL.3(names = c('hill', 'max', 'ed50')))
summary(Eilat_DRC)
View(Eilat_DRC)
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit[,5]
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit
View(Eilat_CBASS_coeff)
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit$par
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit$par[,5]
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit$par[5,]
Eilat_CBASS_coeff
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit$par[1,5]
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit$par[5,1]
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit$par[5,]
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$fit$par[,5]
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$coefficients
Eilat_CBASS_coeff
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$coefficients[1,2]
#extract ED50
Eilat_CBASS_coeff<-Eilat_DRC$coefficients[2]
#extract ED50
Eilat_RSS_coeff<-Eilat_DRC$coefficients[5]
Eilat_CBASS_coeff<-Eilat_DRC$coefficients[6]
Eilat_coeffs<-data.frame(Eilat_CBASS_coeff, Eilat_RSS_coeff)
Eilat_CBASS_preddata = data.frame(temp = seq(27,39, length.out = 100))
Eilat_CBASS_pred = as.data.frame(predict(Eilat_CBASS, newdata = Eilat_CBASS_preddata, interval = 'confidence'))
Eilat_CBASS_preddata = data.frame(Eilat_CBASS_preddata, fvfm = Eilat_CBASS_pred$Prediction, Lower = Eilat_CBASS_pred$Lower, Upper = Eilat_CBASS_pred$Upper)
Eilat_RSS_preddata = data.frame(temp = seq(27,39, length.out = 100))
Eilat_RSS_pred = as.data.frame(predict(Eilat_RSS, newdata = Eilat_RSS_preddata, interval = 'confidence'))
Eilat_RSS_preddata = data.frame(Eilat_RSS_preddata, fvfm = Eilat_RSS_pred$Prediction, Lower = Eilat_RSS_pred$Lower, Upper = Eilat_RSS_pred$Upper)
Eilat_RSS <- drm(PAM ~ Temp, data = Hold_all[Hold_all$Experiment=="RSS",],fct = LL.3())
Eilat_CBASS <- drm(PAM ~ Temp, data = Hold_all[Hold_all$Experiment=="CBASS",], fct = LL.3())
Eilat_CBASS_preddata = data.frame(temp = seq(27,39, length.out = 100))
Eilat_CBASS_pred = as.data.frame(predict(Eilat_CBASS, newdata = Eilat_CBASS_preddata, interval = 'confidence'))
Eilat_CBASS_preddata = data.frame(Eilat_CBASS_preddata, fvfm = Eilat_CBASS_pred$Prediction, Lower = Eilat_CBASS_pred$Lower, Upper = Eilat_CBASS_pred$Upper)
Eilat_RSS_preddata = data.frame(temp = seq(27,39, length.out = 100))
Eilat_RSS_pred = as.data.frame(predict(Eilat_RSS, newdata = Eilat_RSS_preddata, interval = 'confidence'))
Eila
Eilat_CBASS_preddata = data.frame(temp = seq(27,39, length.out = 100))
Eilat_CBASS_pred = as.data.frame(predict(Eilat_CBASS, newdata = Eilat_CBASS_preddata, interval = 'confidence'))
Eilat_CBASS_preddata = data.frame(Eilat_CBASS_preddata, fvfm = Eilat_CBASS_pred$Prediction, Lower = Eilat_CBASS_pred$Lower, Upper = Eilat_CBASS_pred$Upper)
Eilat_RSS_preddata = data.frame(temp = seq(27,39, length.out = 100))
Eilat_RSS_pred = as.data.frame(predict(Eilat_RSS, newdata = Eilat_RSS_preddata, interval = 'confidence'))
Eilat_RSS_preddata = data.frame(Eilat_RSS_preddata, fvfm = Eilat_RSS_pred$Prediction, Lower = Eilat_RSS_pred$Lower, Upper = Eilat_RSS_pred$Upper)
Eilat_coeffs<-data.frame(Eilat_CBASS_coeff, Eilat_RSS_coeff)
Eilat_DRC_plot<- ggplot() +
geom_jitter(data = Hold_all, aes(x = Temp, y = PAM, color = Experiment), size = 1, width = 0.25) +
scale_x_continuous(limits=c(26,40), breaks=c(26,28,30,32,34,36,38)) +
scale_y_continuous(limits=c(-0.1, 0.7), breaks=c(0, 0.2, 0.4, 0.6)) +
geom_line(data = Eilat_CBASS_preddata, aes(x = temp, y = fvfm), color = '#66ccfe', show.legend = FALSE) +
geom_ribbon(data = Eilat_CBASS_preddata, aes(x = temp, ymin=Lower, ymax=Upper), color = '#66ccfe', linetype=2, alpha = 0.2) +
geom_vline(data = Eilat_coeffs, aes(xintercept = Eilat_CBASS_coeff), color = '#66ccfe', show.legend = FALSE) +
geom_text(data = Eilat_coeffs, aes(label = Eilat_CBASS_coeff), x = 30, y = 0.2, show.legend = FALSE, color = '#66ccfe') +
geom_line(data = Eilat_RSS_preddata, aes(x = temp, y = fvfm), color = '#e92000', show.legend = FALSE) +
geom_ribbon(data = Eilat_RSS_preddata, aes(x = temp, ymin=Lower, ymax=Upper), color = '#e92000', linetype=2, alpha = 0.2) +
geom_vline(data = Eilat_coefs, aes(xintercept = Eilat_RSS_coeff), color = '#e92000', show.legend = FALSE) +
geom_text(data = Eilat_coeffs, aes(label = Eilat_RSS_coeff), x = 30, y = 0.1, show.legend = FALSE, color = '#e92000') +
scale_color_manual(values=c('#66ccfe','#e92000')) +
ylab("Fv/Fm") +
xlab("Temperature (°C)") +
theme_bw()
Eilat_DRC_plot
Eilat_DRC_plot<- ggplot() +
geom_jitter(data = Hold_all, aes(x = Temp, y = PAM, color = Experiment), size = 1, width = 0.25) +
scale_x_continuous(limits=c(26,40), breaks=c(26,28,30,32,34,36,38)) +
scale_y_continuous(limits=c(-0.1, 0.7), breaks=c(0, 0.2, 0.4, 0.6)) +
geom_line(data = Eilat_CBASS_preddata, aes(x = temp, y = fvfm), color = '#66ccfe', show.legend = FALSE) +
geom_ribbon(data = Eilat_CBASS_preddata, aes(x = temp, ymin=Lower, ymax=Upper), color = '#66ccfe', linetype=2, alpha = 0.2) +
geom_vline(data = Eilat_coeffs, aes(xintercept = Eilat_CBASS_coeff), color = '#66ccfe', show.legend = FALSE) +
geom_text(data = Eilat_coeffs, aes(label = Eilat_CBASS_coeff), x = 30, y = 0.2, show.legend = FALSE, color = '#66ccfe') +
geom_line(data = Eilat_RSS_preddata, aes(x = temp, y = fvfm), color = '#e92000', show.legend = FALSE) +
geom_ribbon(data = Eilat_RSS_preddata, aes(x = temp, ymin=Lower, ymax=Upper), color = '#e92000', linetype=2, alpha = 0.2) +
geom_vline(data = Eilat_coeffs, aes(xintercept = Eilat_RSS_coeff), color = '#e92000', show.legend = FALSE) +
geom_text(data = Eilat_coeffs, aes(label = Eilat_RSS_coeff), x = 30, y = 0.1, show.legend = FALSE, color = '#e92000') +
scale_color_manual(values=c('#66ccfe','#e92000')) +
ylab("Fv/Fm") +
xlab("Temperature (°C)") +
theme_bw()
Eilat_DRC_plot
